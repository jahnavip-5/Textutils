{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","_jsx","className","concat","mode","children","_jsxs","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","_Fragment","style","color","heading","value","onChange","event","target","backgroundColor","border","rows","newtext","toUpperCase","showAlert","toLowerCase","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","navigator","clipboard","writeText","newText","split","join","length","Alert","alert","word","str","charAt","slice","capitalize","defaultProps","aboutText","App","setalert","message","setTimeout","_useState3","_useState4","setMode","document","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.b67a8c7a.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\"> \r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li> */}\r\n        \r\n      </ul>\r\n      {/* <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='dark'?'light':'dark'}`}>\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText :PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title:\"title de\",\r\n    aboutText :\"text de\"\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text,setText]=useState('');\r\n    //setText('some text');\r\n    const handleUpClick = () =>{\r\n    //  console.log('uppercase'+text);\r\n    //  setText(\"Clicked on handleUpClick\");\r\n        let newtext=text.toUpperCase();\r\n        setText(newtext);\r\n        props.showAlert(\"Uppercase\",\"success\")\r\n    }\r\n    const handleClear =() =>{\r\n        setText(\"\");\r\n    }\r\n    const handleLoClick = () =>{\r\n          let newtext=text.toLowerCase();\r\n            setText(newtext);\r\n            props.showAlert(\"Lowercase\",\"success\")\r\n        }\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    const speak = () => {\r\n        let msg = new SpeechSynthesisUtterance();\r\n        msg.text = text;\r\n        window.speechSynthesis.speak(msg);\r\n      }\r\n\r\n      const handleCopy=()=>{\r\n        navigator.clipboard.writeText(text);\r\n\r\n      }\r\n\r\n      const remextraspaces = () => {\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(' '));\r\n      }\r\n\r\n    return (\r\n    <>\r\n            <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}} >\r\n            <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'rgb(34,30,30)':'white', border:props.mode==='dark'?'1px solid white':'1px solid black', color: props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary m-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary m-1\" onClick={handleLoClick} >Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary m-1\" onClick={handleClear} >Clear Text</button>\r\n                <button className=\"btn btn-primary m-1\" onClick={speak} >Text to Speech</button>\r\n                <button className=\"btn btn-primary m-1\" onClick={handleCopy} >Copy Text</button>\r\n                <button className=\"btn btn-primary m-1\" onClick={remextraspaces} >Remove Extra Spaces</button>\r\n\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n                <h2>Your text summary</h2>\r\n                <p> {text.split(\" \").length} words and {text.length} characters</p>\r\n                <p>{0.008* text.split(\" \").length} Minutes to read</p>\r\n               {/* 125 words->1 minutes  1 word->1/125=0.008 minutes */}\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:'Enter something to preview it here'}</p>\r\n            </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const str=word.toLowerCase();\r\n        return str.charAt(0).toUpperCase()+str.slice(1);\r\n    }\r\n  return (\r\n   \r\n          props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n               <strong> {capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n         </div>\r\n   \r\n  )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\n\nfunction App() {\n\n const[alert,setalert] =useState(null);\n\n  const showAlert=(message,type)=>{\n    setalert({\n      msg:message,\n      type:type \n    }) \n    //5secs\n    setTimeout(() => {\n      setalert(null) \n      }, 2000);\n\n     \n  }\n\n\n  // Whther dark mode is enabled or not\n  const [mode,setMode]=useState('light');\n  const toggleMode=()=>{\n    if(mode==='dark'){\n      setMode(\"light\");\n      document.body.style.backgroundColor='white'\n      showAlert(\"Light Mode is enabled\",\"success\")  \n      document.title='TextUtils-Light Mode';\n    \n    }else{\n        setMode(\"dark\")\n        document.body.style.backgroundColor='rgb(34,30,30)'\n        showAlert(\"Dark Mode is enabled\",\"success\")\n        // setInterval(()=>{\n        //   document.title='TextUtils is amazing';  \n       \n        // },2000)\n        // setInterval(()=>{\n        //   document.title='Install TextUtils Now';  \n       \n        // },1500)\n      };\n\n  }\n  return (\n    <>\n     {/* <Router>    */}\n         <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode}  toggleMode={toggleMode}/>\n         <Alert alert={alert}/>\n         <div className=\"container my-3\">\n                      {/* <Switch>\n                        <Route exact path=\"/about\" >\n                          <About/>\n                        </Route> */}\n                        {/* <Route exact path=\"/\"> */}\n                            <TextForm\n                              showAlert={showAlert}\n                              heading=\"Enter Text to analyze \"\n                              mode={mode}\n                            />\n                          \n                        {/* </Route> */}\n                  {/* </Switch> */}\n         </div>\n                \n      {/* </Router>   */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}